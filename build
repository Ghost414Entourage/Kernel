https://www.kernel.org



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





uname -r

sudo apt install libzstd-dev liblz4-dev libssl-dev libcrypto++-dev



You can check available kernel versions in your system's repositories with the following command: 

apt-cache search linux-image


Once you have identified the desired kernel version, you can install it using the apt command.

sudo apt install linux-image-5.8.0-53-generic






While most users rely on precompiled kernel packages, compiling your own kernel gives you full control over the features and modules included in the kernel. This process is more advanced but useful for custom kernel setups.



cd /usr/src 
sudo wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.x.tar.xz 
sudo tar -xf linux-5.x.tar.xz 
cd linux-5.x





sudo apt update 
sudo apt install build-essential libncurses5-dev bison flex libssl-dev libelf-dev bc
sudo apt update
sudo apt install libdwarf-dev libelf-dev
dpkg -L libdwarf-dev | grep dwarf.h

sudo ln -s /usr/include/libdwarf/dwarf.h /usr/include/dwarf.h
sudo ln -s /usr/include/libdwarf/libdwarf.h /usr/include/libdwarf.h

sudo apt install libdw-dev
ls /usr/include/elfutils/libdw.h









The kernel comes with a configuration tool that allows you to customize the kernel before compiling. There are a few common ways to configure the kernel: 
●      Menuconfig (interactive menu-driven interface) 
●      xconfig (graphical interface, requires qt library) 
●      defconfig (default configuration)



To use the interactive menu configuration, run: 

make menuconfig


make mrproper
make defconfig   # or your specific .config



make clean

make -j$(nproc)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


scripts/config --disable SYSTEM_TRUSTED_KEYS
scripts/config --disable SYSTEM_REVOCATION_KEYS



or 


mkdir -p debian
openssl req -x509 -new -nodes -utf8 -sha256 -days 36500 -batch \
  -out debian/canonical-certs.pem -keyout debian/canonical-certs.pem



or 



scripts/config --disable CONFIG_MODULE_SIG
scripts/config --disable CONFIG_MODULE_SIG_ALL




scripts/config --disable SYSTEM_TRUSTED_KEYS
scripts/config --disable SYSTEM_REVOCATION_KEYS



scripts/config --disable SYSTEM_TRUSTED_KEYRING
scripts/config --disable SYSTEM_TRUSTED_KEYS
scripts/config --disable SYSTEM_REVOCATION_KEYS



scripts/config -s | grep KEY



scripts/config -s | grep -E "BLACKLIST|REVOCATION|TRUSTED"



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


make -j1 2>&1 | tee build.log


sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS/d' .config
sed -i '/CONFIG_SYSTEM_REVOCATION_KEYS/d' .config


scripts/config --disable SYSTEM_TRUSTED_KEYS
scripts/config --disable SYSTEM_REVOCATION_KEYS
scripts/config --disable SYSTEM_TRUSTED_KEYRING
scripts/config --disable SYSTEM_REVOCATION_LIST
scripts/config --disable SYSTEM_BLACKLIST_KEYRING


grep CONFIG_SYSTEM_ .config


scripts/config --disable SYSTEM_EXTRA_CERTIFICATE
scripts/config --undefine SYSTEM_EXTRA_CERTIFICATE_SIZE


grep CONFIG_SYSTEM_ .config



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




